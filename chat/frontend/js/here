document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.querySelector('.login__form');
    const registerButton = document.querySelector('.register__button');
    const nameInputForm = document.querySelector('.name-input__form');
    const chatForm = document.querySelector('.chat__form');
    const messagesContainer = document.querySelector('.chat__messages');
    const codePopup = document.getElementById('code-popup');
    const codeButton = document.querySelector('.chat__code-button');
    const codeCloseButton = document.querySelector('.code-popup__close-button');
    const codeExecuteButton = document.querySelector('.code-popup__button');
    const codeConsole = document.getElementById('code-popup-console');
    const imageButton = document.querySelector('.chat__image-button');
    const imageInput = document.querySelector('#imageInput');
    const ttElement = document.querySelector('.tt');
    const container = document.querySelector('.container');
    let userId = null;
    let userName = null;
    let userColor = null;

    const colors = ["cadetblue", "darkgoldenrod", "cornflowerblue", "darkkhaki", "hotpink", "gold"];

    const firebaseConfig = {
        apiKey: "AIzaSyA6PWkidk688t7Jt1cRec2pwDrqByI448k",
        authDomain: "chatcode-3ff70.firebaseapp.com",
        databaseURL: "https://chatcode-3ff70-default-rtdb.firebaseio.com",
        projectId: "chatcode-3ff70",
        storageBucket: "chatcode-3ff70.appspot.com",
        messagingSenderId: "1017866956028",
        appId: "1:1017866956028:web:cd08d04c83ad7aa9337b79",
        measurementId: "G-FNP2G66YZS"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    const auth = firebase.auth();
    const storage = firebase.storage();

    const responses = {
        "/bot": "Olá sou o Robozão dos Cria de ADS, posso ajudar com alguns dos comandos abaixo:<br>" +
            "<br>- /bot o que é algoritmo?<br>" +
            "- /bot o que é javascript?<br>" +
            "- /bot qual a diferença entre java e javascript?<br>" +
            "- /bot o que é html?<br>" +
            "- /bot qual o comando de git para fazer commit?<br>" +
            "- /bot quais as permissões do chmod?<br>" +
            "- /bot como criar um repositório no github?<br>" +
            "- /bot o que é typescript?<br>"
    };

    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const email = loginForm.querySelector('.login__email').value;
        const password = loginForm.querySelector('.login__password').value;

        auth.signInWithEmailAndPassword(email, password)
            .then((userCredential) => {
                userId = userCredential.user.uid;
                userColor = colors[Math.floor(Math.random() * colors.length)];
                ttElement.style.display = 'none';
                container.classList.add('fullscreen');
                loginForm.parentElement.style.display = 'none';
                document.querySelector('.name-input').style.display = 'flex';
            })
            .catch((error) => {
                console.error('Erro ao fazer login:', error.message);
            });
    });

    registerButton.addEventListener('click', () => {
        const email = loginForm.querySelector('.login__email').value;
        const password = loginForm.querySelector('.login__password').value;

        auth.createUserWithEmailAndPassword(email, password)
            .then((userCredential) => {
                userId = userCredential.user.uid;
                userColor = colors[Math.floor(Math.random() * colors.length)];
                ttElement.style.display = 'none';
                container.classList.add('fullscreen');
                loginForm.parentElement.style.display = 'none';
                document.querySelector('.name-input').style.display = 'flex';
            })
            .catch((error) => {
                console.error('Erro ao registrar:', error.message);
            });
    });

    nameInputForm.addEventListener('submit', (e) => {
        e.preventDefault();
        userName = nameInputForm.querySelector('.name-input__input').value;
        document.querySelector('.name-input').style.display = 'none';
        document.querySelector('.chat').style.display = 'flex';
        loadMessages();
    });

    chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const messageInput = chatForm.querySelector('.chat__input');
        const message = messageInput.value;
        const timestamp = new Date().toLocaleString();
        
        if (message.trim() !== '') {
            if (message === '/clearall') {
                clearAllMessages();
            } else {
                db.ref('messages').push({
                    userId,
                    userName,
                    userColor,
                    message,
                    timestamp,
                });
            }
            messageInput.value = '';
            checkBotResponse(message);
        }
    });

    function clearAllMessages() {
        messagesContainer.innerHTML = '';
    }

    db.ref('messages').on('child_added', (snapshot) => {
        const message = snapshot.val();
        displayMessage(message);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    function displayMessage({ userId: senderId, userName, userColor, message, timestamp }) {
        const messageElement = document.createElement('div');
        messageElement.classList.add(senderId === userId ? 'message-self' : 'message-other');
        messageElement.innerHTML = `
            <span class="message-username" style="color: ${userColor}">${userName} - ${timestamp}</span>
            <span class="message-content">${message}</span>
        `;
        messagesContainer.appendChild(messageElement);
    }

    codeButton.addEventListener('click', () => {
        codePopup.style.display = 'flex';
    });

    codeCloseButton.addEventListener('click', () => {
        codePopup.style.display = 'none';
    });

    codeExecuteButton.addEventListener('click', () => {
        const languageSelector = document.querySelector('.code-popup__language-selector');
        const codeTextarea = document.querySelector('.code-popup__textarea');
        const language = languageSelector.value;
        const code = codeTextarea.value;
        executeCode(language, code);
    });

    function executeCode(language, code) {
        codeConsole.innerHTML = '';
        const originalConsoleLog = console.log;
        console.log = function(...args) {
            const message = args.join(' ') + '\n';
            codeConsole.innerHTML += message.replace(/\n/g, '<br>');
            originalConsoleLog.apply(console, args);
        };
    
        try {
            if (language === 'javascript') {
                const result = executeJavaScript(code);
                if (result !== undefined) {
                    codeConsole.innerHTML += result;
                }
            } else if (language === 'typescript') {
                const tsResult = ts.transpile(code);
                const result = executeJavaScript(tsResult);
                if (result !== undefined) {
                    codeConsole.innerHTML += result;
                }
            }
        } catch (error) {
            codeConsole.innerHTML += `Error: ${error.message}`;
        } finally {
            console.log = originalConsoleLog;
        }
    }
    
    function executeJavaScript(code) {
        try {
            const result = (new Function(code))();
            return result;
        } catch (error) {
            throw error;
        }
    }

    imageButton.addEventListener('click', () => {
        imageInput.click();
    });

    imageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            const storageRef = storage.ref('images/' + file.name);
            storageRef.put(file).then(() => {
                storageRef.getDownloadURL().then((url) => {
                    const messageInput = chatForm.querySelector('.chat__input');
                    const timestamp = new Date().toLocaleString();
                    
                    db.ref('messages').push({
                        userId,
                        userName,
                        userColor,
                        message: `<div class="message-img-container"><img src="${url}" class="message-img"></div>`,
                        timestamp,
                    });
                });
            });
        }
    });

    function loadMessages() {
        db.ref('messages').once('value', (snapshot) => {
            const messages = snapshot.val();
            for (let id in messages) {
                displayMessage(messages[id]);
            }
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });
    }

    // Check for bot responses
    function checkBotResponse(messageText) {
        const lowerCaseMessage = messageText.toLowerCase();
        if (responses.hasOwnProperty(lowerCaseMessage)) {
            const botResponse = responses[lowerCaseMessage];
            const botMessage = {
                userId: 'bot',
                userName: 'ChatCodeBot',
                userColor: 'lightblue',
                message: botResponse,
                timestamp: new Date().toLocaleString(),
            };
            setTimeout(() => {
                db.ref('messages').push(botMessage);
            }, 1000);
        }
    }
});
